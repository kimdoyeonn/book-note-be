generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @db.Timestamptz(6)
  provider     String   @unique
  providerId   String   @unique
  refreshToken String?
  username     String?

  notes     Note[]
  userBooks UserBook[]
  bookLike  BookLike[]
}

model UserBook {
  id     Int @id @default(autoincrement())
  userId Int
  bookId Int

  book Book @relation(fields: [bookId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, bookId])
}

model BookLike {
  id     Int     @id @default(autoincrement())
  bookId Int
  userId Int
  isLike Boolean @default(false)

  book Book @relation(fields: [bookId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, bookId])
}

model Book {
  id           Int      @id @default(autoincrement())
  isbn         String   @unique
  title        String
  summary      String?
  shared       Boolean? @default(false)
  author       String
  thumbnailUrl String?
  publisher    String
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @db.Timestamptz(6)
  like         Boolean?

  notes    Note[]
  userBook UserBook[]
  bookLike BookLike[]
}

model Note {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  bookId    Int

  book Book @relation(fields: [bookId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
